{"version":3,"sources":["webpack:///./src/ui/src/components/CustomizablePopup/CustomizablePopup.js","webpack:///./src/ui/src/components/CustomizablePopup/index.js"],"names":["propTypes","dataElement","PropTypes","string","isRequired","children","arrayOf","any","CustomizablePopup","_ref","childrenClassName","items","useSelector","state","selectors","getPopupItems","shallowEqual","isModularUIEnabled","getIsCustomUIEnabled","childrenArray","React","Children","toArray","map","item","i","type","hidden","key","concat","mediaQueryClassName","screen","join","component","find","child","props","_objectSpread","className","ITEM_TYPE","TOOL_BUTTON","createElement","ToolButtonModular","ToolButton","console","warn","ToolGroupButton","ToggleElementButton","TOGGLE_BUTTON","ToggleElementButtonModular","ActionButton","BUTTON","CustomButtonModular","STATEFUL_BUTTON","StatefulButtonModular","StatefulButton","CUSTOM_ELEMENT","CustomElement","DIVIDER","_extends","cloneElement"],"mappings":"g0DAmBA,IAAMA,EAAY,CAGhBC,YAAaC,IAAUC,OAAOC,WAE9BC,SAAUH,IAAUI,QAAQJ,IAAUK,KAAKH,YAGvCI,EAAoB,SAAHC,GAAqD,IAA/CR,EAAWQ,EAAXR,YAAaI,EAAQI,EAARJ,SAAUK,EAAiBD,EAAjBC,kBAC5CC,EAAQC,aACZ,SAACC,GAAK,OAAKC,IAAUC,cAAcF,EAAOZ,KAC1Ce,KAEIC,EAAqBL,YAAYE,IAAUI,sBAC3CC,EAAgBC,IAAMC,SAASC,QAAQjB,GA2B7C,OAAOM,EAAMY,KAAI,SAACC,EAAMC,GACtB,IAAQxB,EAA8BuB,EAA9BvB,YAAayB,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACrBC,EAAM,GAAHC,OAAMH,EAAI,KAAAG,OAAI5B,GAAewB,GAChCK,EAAsBH,aAAM,EAANA,EACxBJ,KAAI,SAACQ,GAAM,iBAAAF,OAAgBE,MAC5BC,KAAK,KACJC,EAAYd,EAAce,MAC5B,SAACC,GAAK,OAAKA,EAAMC,MAAMnC,cAAgBA,KAIzC,IAAKgC,EAAW,CACd,IAAMG,EAAKC,IAAA,GAAQb,GAAI,IAAEM,sBAAqBQ,UAAW5B,IAErDgB,IAASa,IAAUC,cAEnBP,EADEhB,EACUG,IAAAqB,cAACC,IAAsBN,GAEvBhB,IAAAqB,cAACE,IAAeP,IAInB,oBAATV,IACET,EACF2B,QAAQC,KAAK,kFAEbZ,EAAYb,IAAAqB,cAACK,IAAoBV,IAKxB,wBAATV,IACFO,EAAYb,IAAAqB,cAACM,IAAwBX,IAEnCV,IAASa,IAAUS,eACjB/B,IACFgB,EAAYb,IAAAqB,cAACQ,IAA+Bb,IAInC,iBAATV,IACFO,EAAYb,IAAAqB,cAACS,IAAiBd,IAG5BV,IAASa,IAAUY,SACjBlC,EACFgB,EAAYb,IAAAqB,cAACW,IAAwBhB,GAErCQ,QAAQC,KAAK,kFAIbnB,IAASa,IAAUc,kBAEnBpB,EADEhB,EACUG,IAAAqB,cAACa,IAA0BlB,GAE3BhB,IAAAqB,cAACc,IAAmBnB,IAIhCV,IAASa,IAAUiB,iBACrBvB,EAAYb,IAAAqB,cAACgB,IAAkBrB,IAGpB,WAATV,GAAqBA,IAASa,IAAUmB,UAC1CzB,EACEb,IAAAqB,cAAA,MAAAkB,EAAA,CAAKrB,UAAS,GAAAT,OAAKH,EAAI,KAAAG,OAAIC,IAA2BM,KAK5D,OAAOH,EACHb,IAAMwC,aAAa3B,EAAW,CAC9BL,QAEA,SAIRpB,EAAkBR,UAAYA,EAEfQ,QC3IAA","file":"chunks/chunk.11.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport ToolButton from 'components/ToolButton';\nimport ToolGroupButton from 'components/ToolGroupButton';\nimport ToggleElementButton from 'components/ToggleElementButton';\nimport ActionButton from 'components/ActionButton';\nimport StatefulButton from 'components/StatefulButton';\nimport CustomElement from 'components/CustomElement';\n\n/** Modular Components */\nimport ToolButtonModular from 'components/ModularComponents/ToolButton';\nimport ToggleElementButtonModular from 'components/ModularComponents/ToggleElementButton';\nimport CustomButtonModular from 'components/ModularComponents/CustomButton';\nimport StatefulButtonModular from 'components/ModularComponents/StatefulButton';\nimport selectors from 'selectors';\nimport { ITEM_TYPE } from 'constants/customizationVariables';\n\nconst propTypes = {\n  // The data element of the popup component.\n  // Used to grab button props from redux and use those props to override the existing ones, if there're any\n  dataElement: PropTypes.string.isRequired,\n  // An object that maps an item's dataElement to a functional React component\n  children: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst CustomizablePopup = ({ dataElement, children, childrenClassName }) => {\n  const items = useSelector(\n    (state) => selectors.getPopupItems(state, dataElement),\n    shallowEqual,\n  );\n  const isModularUIEnabled = useSelector(selectors.getIsCustomUIEnabled);\n  const childrenArray = React.Children.toArray(children);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // give a error message in the console if a child's dataElement in the childrenArray isn't in the redux state\n    childrenArray.forEach((child) => {\n      const found = items.some(\n        ({ dataElement }) => dataElement === child.props.dataElement,\n      );\n      if (!found) {\n        const error = `\n        A React component with dataElement ${child.props.dataElement} won't be rendered because it isn't in the redux state. Modify initialState.js like below to fix this issue:\n\n        {\n          viewer: {\n            ...,\n            ${dataElement}: [\n              ...,\n              { dataElement: '${child.props.dataElement}' },\n            ]\n          }\n        }\n      `;\n        console.error(error.replace(/\\s+/, ''));\n      }\n    });\n  }\n\n  return items.map((item, i) => {\n    const { dataElement, type, hidden } = item;\n    const key = `${type}-${dataElement || i}`;\n    const mediaQueryClassName = hidden\n      ?.map((screen) => `hide-in-${screen}`)\n      .join(' ');\n    let component = childrenArray.find(\n      (child) => child.props.dataElement === dataElement,\n    );\n\n    // When we remove the legacy UI we can simplify this logic as we won't need to check for modular UI\n    if (!component) {\n      const props = { ...item, mediaQueryClassName, className: childrenClassName };\n\n      if (type === ITEM_TYPE.TOOL_BUTTON) {\n        if (isModularUIEnabled) {\n          component = <ToolButtonModular {...props} />;\n        } else {\n          component = <ToolButton {...props} />;\n        }\n      }\n\n      if (type === 'toolGroupButton') {\n        if (isModularUIEnabled) {\n          console.warn('ToolGroupButton is not supported in modular UI. Please use ToolButton instead.');\n        } else {\n          component = <ToolGroupButton {...props} />;\n        }\n      }\n\n      // Legacy UI uses toggleElementButton but modular UI uses toggleButton\n      if (type === 'toggleElementButton') {\n        component = <ToggleElementButton {...props} />;\n      }\n      if (type === ITEM_TYPE.TOGGLE_BUTTON) {\n        if (isModularUIEnabled) {\n          component = <ToggleElementButtonModular {...props} />;\n        }\n      }\n\n      if (type === 'actionButton') {\n        component = <ActionButton {...props} />;\n      }\n\n      if (type === ITEM_TYPE.BUTTON) {\n        if (isModularUIEnabled) {\n          component = <CustomButtonModular {...props} />;\n        } else {\n          console.warn('customButton is not supported in Legacy UI. Please use customElement instead.');\n        }\n      }\n\n      if (type === ITEM_TYPE.STATEFUL_BUTTON) {\n        if (isModularUIEnabled) {\n          component = <StatefulButtonModular {...props} />;\n        } else {\n          component = <StatefulButton {...props} />;\n        }\n      }\n\n      if (type === ITEM_TYPE.CUSTOM_ELEMENT) {\n        component = <CustomElement {...props} />;\n      }\n\n      if (type === 'spacer' || type === ITEM_TYPE.DIVIDER) {\n        component = (\n          <div className={`${type} ${mediaQueryClassName}`} {...props} />\n        );\n      }\n    }\n\n    return component\n      ? React.cloneElement(component, {\n        key,\n      })\n      : null;\n  });\n};\n\nCustomizablePopup.propTypes = propTypes;\n\nexport default CustomizablePopup;\n","import CustomizablePopup from './CustomizablePopup';\n\nexport default CustomizablePopup;"],"sourceRoot":""}